{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\job\\\\lilac\\\\pages\\\\demo\\\\preloader\\\\[id].tsx\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\n\nconst CatalogItemInfo = ({\n  params\n}) => {\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: params\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const paths = [{\n    params: {\n      id: '1'\n    }\n  }, {\n    params: {\n      id: '2'\n    }\n  }];\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  async function f() {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve('готово!'), 1000);\n    });\n    let result = await promise; // будет ждать, пока промис не выполнится (*)\n\n    alert(result); // \"готово!\"\n  }\n\n  return {\n    props: {\n      params: {\n        params: f()\n      }\n    }\n  };\n}\nexport default CatalogItemInfo;","map":{"version":3,"sources":["C:/Users/User/Documents/job/lilac/pages/demo/preloader/[id].tsx"],"names":["React","useRouter","CatalogItemInfo","params","router","isFallback","getStaticPaths","paths","id","fallback","getStaticProps","f","promise","Promise","resolve","reject","setTimeout","result","alert","props"],"mappings":";;AACA,OAAOA,KAAP,MAAgC,OAAhC;AAYA,SAASC,SAAT,QAA0B,aAA1B;;AAMA,MAAMC,eAAuC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC9D,QAAMC,MAAM,GAAGH,SAAS,EAAxB;;AACA,MAAIG,MAAM,CAACC,UAAX,EAAuB;AACrB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO;AAAA,cAAMF;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAND;;AAQA,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAG,CAAC;AAAEJ,IAAAA,MAAM,EAAE;AAAEK,MAAAA,EAAE,EAAE;AAAN;AAAV,GAAD,EAA0B;AAAEL,IAAAA,MAAM,EAAE;AAAEK,MAAAA,EAAE,EAAE;AAAN;AAAV,GAA1B,CAAd;AACA,SAAO;AAAED,IAAAA,KAAF;AAASE,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AACD,OAAO,eAAeC,cAAf,CAA8B;AAAEP,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,iBAAeQ,CAAf,GAAmB;AACjB,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7CC,MAAAA,UAAU,CAAC,MAAMF,OAAO,CAAC,SAAD,CAAd,EAA2B,IAA3B,CAAV;AACD,KAFa,CAAd;AAIA,QAAIG,MAAM,GAAG,MAAML,OAAnB,CALiB,CAKU;;AAE3BM,IAAAA,KAAK,CAACD,MAAD,CAAL,CAPiB,CAOH;AACf;;AACD,SAAO;AAAEE,IAAAA,KAAK,EAAE;AAAEhB,MAAAA,MAAM,EAAE;AAAEA,QAAAA,MAAM,EAAEQ,CAAC;AAAX;AAAV;AAAT,GAAP;AACD;AAED,eAAeT,eAAf","sourcesContent":["import { NextPage } from 'next'\r\nimport React, { useState } from 'react'\r\nimport { Field, Form, Formik } from 'formik'\r\n\r\nimport { ICatalogItem } from '@/types/catalogItem.types'\r\nimport styles from './id.module.scss'\r\nimport { InfoType } from '@/components/CatalogItemInfo/InfoType'\r\nimport { InfoSize } from '@/components/CatalogItemInfo/InfoSize'\r\nimport { Order } from '@/components/CatalogItemInfo/Order'\r\nimport { Print } from '@/components/CatalogItemInfo/Print'\r\nimport { Delivery } from '@/components/CatalogItemInfo/Delivery'\r\nimport { NavbarForCatalogItem } from '@/components/CatalogItemInfo/NavbarForCatalogItem'\r\nimport { ImagMonument } from '@/components/CatalogItemInfo/ImagMonument'\r\nimport { useRouter } from 'next/router'\r\n\r\ninterface IInitialData {\r\n  params: string\r\n}\r\n\r\nconst CatalogItemInfo: NextPage<IInitialData> = ({ params }) => {\r\n  const router = useRouter()\r\n  if (router.isFallback) {\r\n    return <div>Loading...</div>\r\n  }\r\n  return <div>{params}</div>\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const paths = [{ params: { id: '1' } }, { params: { id: '2' } }]\r\n  return { paths, fallback: false }\r\n}\r\nexport async function getStaticProps({ params }) {\r\n  async function f() {\r\n    let promise = new Promise((resolve, reject) => {\r\n      setTimeout(() => resolve('готово!'), 1000)\r\n    })\r\n\r\n    let result = await promise // будет ждать, пока промис не выполнится (*)\r\n\r\n    alert(result) // \"готово!\"\r\n  }\r\n  return { props: { params: { params: f() } } }\r\n}\r\n\r\nexport default CatalogItemInfo\r\n"]},"metadata":{},"sourceType":"module"}