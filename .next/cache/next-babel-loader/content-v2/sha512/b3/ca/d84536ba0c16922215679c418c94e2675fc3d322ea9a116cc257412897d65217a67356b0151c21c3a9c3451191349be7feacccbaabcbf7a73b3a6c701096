{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\job\\\\lilac\\\\components\\\\CatalogItemInfo\\\\InfoType\\\\Type.tsx\";\nimport React, { useState } from 'react';\nimport { useField } from 'formik';\nexport const Type = () => {\n  const [field, meta, helper] = useField('type');\n  const {\n    0: value,\n    1: setValue\n  } = useState(field.value);\n\n  const onChange = e => {\n    field.onChange(e);\n    setValue(e.target.value);\n  };\n\n  const checked = v => v === value;\n\n  const type = ['Одинарное', 'Парное', 'Тройное', 'Иное'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: type.map((item, i) => {\n      if (item === 'Иное') return /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: field.name,\n          onChange: e => setValue(e.target.value),\n          type: \"radio\",\n          value: item,\n          checked: checked(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => helper.setValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: field.name,\n          onChange: onChange,\n          type: \"radio\",\n          value: item,\n          checked: checked(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), ' ', item]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/User/Documents/job/lilac/components/CatalogItemInfo/InfoType/Type.tsx"],"names":["React","useState","useField","Type","field","meta","helper","value","setValue","onChange","e","target","checked","v","type","map","item","i","width","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,QAAzB;AAIA,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,QAAM,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,IAAwBJ,QAAQ,CAAC,MAAD,CAAtC;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAASG,KAAK,CAACG,KAAf,CAAlC;;AACA,QAAME,QAAQ,GAAIC,CAAD,IAA4C;AAC3DN,IAAAA,KAAK,CAACK,QAAN,CAAeC,CAAf;AACAF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACD,GAHD;;AAIA,QAAMK,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAKN,KAArC;;AACA,QAAMO,IAAI,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,SAAxB,EAAmC,MAAnC,CAAb;AAEA,sBACE;AAAA,cACGA,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrB,UAAID,IAAI,KAAK,MAAb,EACE,oBACE;AAAe,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT,SAAtB;AAAA,gCACE;AACE,UAAA,IAAI,EAAEd,KAAK,CAACe,IADd;AAEE,UAAA,QAAQ,EAAGT,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAF3B;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAES,IAJT;AAKE,UAAA,OAAO,EAAEJ,OAAO,CAACI,IAAD;AALlB;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL,eAQE;AAAO,UAAA,QAAQ,EAAGN,CAAD,IAAOJ,MAAM,CAACE,QAAP,CAAgBE,CAAC,CAACC,MAAF,CAASJ,KAAzB;AAAxB;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA,SAAYU,CAAZ;AAAA;AAAA;AAAA;AAAA,cADF;AAYF,0BACE;AAAA,gCACE;AACE,UAAA,IAAI,EAAEb,KAAK,CAACe,IADd;AAEE,UAAA,QAAQ,EAAEV,QAFZ;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAEO,IAJT;AAKE,UAAA,OAAO,EAAEJ,OAAO,CAACI,IAAD;AALlB;AAAA;AAAA;AAAA;AAAA,gBADF,EAOK,GAPL,EAQGA,IARH;AAAA,SAAYC,CAAZ;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KA1BA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAzCM","sourcesContent":["import React, { useState } from 'react'\r\nimport { useField } from 'formik'\r\n\r\nimport styles from './styles.module.scss'\r\n\r\nexport const Type = () => {\r\n  const [field, meta, helper] = useField('type')\r\n  const [value, setValue] = useState<string>(field.value)\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    field.onChange(e)\r\n    setValue(e.target.value)\r\n  }\r\n  const checked = (v: string) => v === value\r\n  const type = ['Одинарное', 'Парное', 'Тройное', 'Иное']\r\n\r\n  return (\r\n    <div>\r\n      {type.map((item, i) => {\r\n        if (item === 'Иное')\r\n          return (\r\n            <label key={i} style={{ width: '100%' }}>\r\n              <input\r\n                name={field.name}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                type=\"radio\"\r\n                value={item}\r\n                checked={checked(item)}\r\n              />{' '}\r\n              <input onChange={(e) => helper.setValue(e.target.value)}></input>\r\n            </label>\r\n          )\r\n        return (\r\n          <label key={i}>\r\n            <input\r\n              name={field.name}\r\n              onChange={onChange}\r\n              type=\"radio\"\r\n              value={item}\r\n              checked={checked(item)}\r\n            />{' '}\r\n            {item}\r\n          </label>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}