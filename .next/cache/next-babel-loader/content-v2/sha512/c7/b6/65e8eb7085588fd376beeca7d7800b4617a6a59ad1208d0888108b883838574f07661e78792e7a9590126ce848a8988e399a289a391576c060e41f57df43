{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\job\\\\lilac\\\\components\\\\CatalogItemInfo\\\\InfoType\\\\Type.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useField } from 'formik';\nexport var Type = function Type() {\n  _s();\n\n  var _useField = useField('type'),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var _useState = useState(field.value),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var onChange = function onChange(e) {\n    field.onChange(e);\n    setValue(e.target.value);\n  };\n\n  var checked = function checked(v) {\n    return v === value;\n  };\n\n  var type = ['Одинарное', 'Парное', 'Тройное', 'Иное'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: type.map(function (item, i) {\n      if (item === 'Иное') return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: field.name,\n          onChange: function onChange(e) {\n            return setValue(e.target.value);\n          },\n          type: \"radio\",\n          value: item,\n          checked: checked(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, _this), ' ', /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, _this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, _this);\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: field.name,\n          onChange: onChange,\n          type: \"radio\",\n          value: item,\n          checked: checked(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, _this), ' ', item]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Type, \"lwCPLbUyv1G4yJ0Tb6VkiZVVy/Q=\", false, function () {\n  return [useField];\n});\n\n_c = Type;\n\nvar _c;\n\n$RefreshReg$(_c, \"Type\");","map":{"version":3,"sources":["C:/Users/User/Documents/job/lilac/components/CatalogItemInfo/InfoType/Type.tsx"],"names":["React","useState","useField","Type","field","meta","value","setValue","onChange","e","target","checked","v","type","map","item","i","name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,QAAzB;AAIA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,kBACFD,QAAQ,CAAC,MAAD,CADN;AAAA;AAAA,MACjBE,KADiB;AAAA,MACVC,IADU;;AAAA,kBAEEJ,QAAQ,CAASG,KAAK,CAACE,KAAf,CAFV;AAAA,MAEjBA,KAFiB;AAAA,MAEVC,QAFU;;AAGxB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAA4C;AAC3DL,IAAAA,KAAK,CAACI,QAAN,CAAeC,CAAf;AACAF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACD,GAHD;;AAIA,MAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD;AAAA,WAAeA,CAAC,KAAKN,KAArB;AAAA,GAAhB;;AACA,MAAMO,IAAI,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,SAAxB,EAAmC,MAAnC,CAAb;AAEA,sBACE;AAAA,cACGA,IAAI,CAACC,GAAL,CAAS,UAACC,IAAD,EAAOC,CAAP,EAAa;AACrB,UAAID,IAAI,KAAK,MAAb,EACE,oBACE;AAAA,gCACE;AACE,UAAA,IAAI,EAAEX,KAAK,CAACa,IADd;AAEE,UAAA,QAAQ,EAAE,kBAACR,CAAD;AAAA,mBAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAf;AAAA,WAFZ;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAES,IAJT;AAKE,UAAA,OAAO,EAAEJ,OAAO,CAACI,IAAD;AALlB;AAAA;AAAA;AAAA;AAAA,iBADF,EAOK,GAPL,eAQE;AAAA;AAAA;AAAA;AAAA,iBARF;AAAA,SAAYC,CAAZ;AAAA;AAAA;AAAA;AAAA,eADF;AAYF,0BACE;AAAA,gCACE;AACE,UAAA,IAAI,EAAEZ,KAAK,CAACa,IADd;AAEE,UAAA,QAAQ,EAAET,QAFZ;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,KAAK,EAAEO,IAJT;AAKE,UAAA,OAAO,EAAEJ,OAAO,CAACI,IAAD;AALlB;AAAA;AAAA;AAAA;AAAA,iBADF,EAOK,GAPL,EAQGA,IARH;AAAA,SAAYC,CAAZ;AAAA;AAAA;AAAA;AAAA,eADF;AAYD,KA1BA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AA+BD,CAzCM;;GAAMb,I;UACWD,Q;;;KADXC,I","sourcesContent":["import React, { useState } from 'react'\r\nimport { useField } from 'formik'\r\n\r\nimport styles from './styles.module.scss'\r\n\r\nexport const Type = () => {\r\n  const [field, meta] = useField('type')\r\n  const [value, setValue] = useState<string>(field.value)\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    field.onChange(e)\r\n    setValue(e.target.value)\r\n  }\r\n  const checked = (v: string) => v === value\r\n  const type = ['Одинарное', 'Парное', 'Тройное', 'Иное']\r\n\r\n  return (\r\n    <div>\r\n      {type.map((item, i) => {\r\n        if (item === 'Иное')\r\n          return (\r\n            <label key={i}>\r\n              <input\r\n                name={field.name}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                type=\"radio\"\r\n                value={item}\r\n                checked={checked(item)}\r\n              />{' '}\r\n              <input></input>\r\n            </label>\r\n          )\r\n        return (\r\n          <label key={i}>\r\n            <input\r\n              name={field.name}\r\n              onChange={onChange}\r\n              type=\"radio\"\r\n              value={item}\r\n              checked={checked(item)}\r\n            />{' '}\r\n            {item}\r\n          </label>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}