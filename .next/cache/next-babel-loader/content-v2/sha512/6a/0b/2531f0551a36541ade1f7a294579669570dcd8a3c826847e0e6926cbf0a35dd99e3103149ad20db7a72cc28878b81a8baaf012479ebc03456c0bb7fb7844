{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\job\\\\lilac\\\\components\\\\CatalogItemInfo\\\\InfoType.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { useField } from 'formik';\nimport { Material } from './InfoType/Material';\nexport const InfoType = props => {\n  const [field, meta] = useField(_objectSpread({}, props));\n  const {\n    0: value,\n    1: setValue\n  } = useState(field.value);\n\n  const onChange = e => {\n    field.onChange(e);\n    setValue(e.target.value);\n  };\n\n  const checked = v => v === value;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Material, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/User/Documents/job/lilac/components/CatalogItemInfo/InfoType.tsx"],"names":["React","useState","useField","Material","InfoType","props","field","meta","value","setValue","onChange","e","target","checked","v"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAA8BC,QAA9B,QAA8C,QAA9C;AAIA,SAASC,QAAT,QAAyB,qBAAzB;AAMA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAmB;AACzC,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBL,QAAQ,mBAAMG,KAAN,EAA9B;AACA,QAAM;AAAA,OAACG,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAASK,KAAK,CAACE,KAAf,CAAlC;;AACA,QAAME,QAAQ,GAAIC,CAAD,IAA4C;AAC3DL,IAAAA,KAAK,CAACI,QAAN,CAAeC,CAAf;AACAF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACD,GAHD;;AAIA,QAAMK,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAKN,KAArC;;AAEA,sBACE;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAdM","sourcesContent":["import React, { useState } from 'react'\r\nimport { Field, Form, Formik, useField } from 'formik'\r\n\r\nimport { ICatalogItem } from '@/types/catalogItem.types'\r\nimport styles from './styles.module.scss'\r\nimport { Material } from './InfoType/Material'\r\n\r\ninterface IProps {\r\n  name: string\r\n}\r\n\r\nexport const InfoType = (props: IProps) => {\r\n  const [field, meta] = useField({ ...props })\r\n  const [value, setValue] = useState<string>(field.value)\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    field.onChange(e)\r\n    setValue(e.target.value)\r\n  }\r\n  const checked = (v: string) => v === value\r\n\r\n  return (\r\n    <div>\r\n      <Material></Material>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}